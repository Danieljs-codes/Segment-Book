datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authUserId       String            @unique // This will link to auth.users
  name             String
  email            String            @unique
  books            Book[]
  donationRequests DonationRequest[] @relation("Requester")
  donatedBooks     DonationRequest[] @relation("Donor")
  sentMessages     Message[]         @relation("Sender")
  receivedMessages Message[]         @relation("Recipient")
  notifications    Notification[]    // Add this line

  @@map("users")
}

model Book {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String
  author           String
  description      String?
  ownerId          String            @db.Uuid
  owner            User              @relation(fields: [ownerId], references: [id])
  donationRequests DonationRequest[]
  isDonated        Boolean           @default(false)

  @@map("books")
}

model DonationRequest {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookId      String        @db.Uuid
  book        Book          @relation(fields: [bookId], references: [id])
  requesterId String        @db.Uuid
  requester   User          @relation("Requester", fields: [requesterId], references: [id])
  donorId     String        @db.Uuid
  donor       User          @relation("Donor", fields: [donorId], references: [id])
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("donation_requests")
}

model Message {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content     String
  senderId    String   @db.Uuid
  sender      User     @relation("Sender", fields: [senderId], references: [id])
  recipientId String   @db.Uuid
  recipient   User     @relation("Recipient", fields: [recipientId], references: [id])
  createdAt   DateTime @default(now())

  @@map("messages")
}

model Notification {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String           @db.Uuid
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  content   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@map("notifications")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum NotificationType {
  DONATION_REQUEST
  // Add other notification types as needed
}
